<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yc.blog.mapper.BlogUserMapper" >
  <resultMap id="BaseResultMap" type="com.yc.blog.bean.BlogUser" >
    <id column="uid" property="uid" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="avatar" property="avatar" jdbcType="VARCHAR" />
    <result column="background" property="background" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="token" property="token" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="count" property="count" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from blog_user
    where uid = #{uid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.yc.blog.bean.BlogUser" >
    insert into blog_user (name, type, avatar, password, email)
    values (#{name,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, #{avatar,jdbcType=VARCHAR},
      #{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.yc.blog.bean.BlogUser" >
    update blog_user
    set name = #{name,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      avatar = #{avatar,jdbcType=VARCHAR},
      background = #{background,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <update id="updateByToken" parameterType="com.yc.blog.bean.BlogUser" >
    update blog_user
    set name = #{name,jdbcType=VARCHAR},
      avatar = #{avatar,jdbcType=VARCHAR},
      background = #{background,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR}
    where token = #{token,jdbcType=VARCHAR}
  </update>
  <update id="setToken" parameterType="com.yc.blog.bean.BlogUser" >
    update blog_user
    set token = #{token,jdbcType=VARCHAR}
    where uid = #{uid,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select uid, name, type, avatar, background, password, email, create_time, update_time, IFNULL(count, 0) count
    from blog_user
    left join (
      select author, count(*) count
      from blog_article
      group by author
    ) tmp on tmp.author = blog_user.uid
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <select id="selectByEmail" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select uid, name, type, avatar, background, password, email, create_time, update_time
    from blog_user
    where email = #{email,jdbcType=VARCHAR}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select uid, name, type, avatar, background, password, email, create_time, update_time, IFNULL(count, 0) count
    from blog_user
    left join (
      select author, count(*) count
      from blog_article
      group by author
    ) tmp on tmp.author = blog_user.uid
    order by blog_user.update_time desc
  </select>
  <select id="getToken" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select token
    from blog_user
    where uid = #{uid,jdbcType=INTEGER}
  </select>
  <select id="selectByToken" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select uid, name, type, avatar, background, password, email, create_time, update_time
    from blog_user
    where token = #{token,jdbcType=VARCHAR}
  </select>
</mapper>